#!/bin/bash

# Enhanced WubForge Distribution Script with logging
set -e

# Logging setup
LOG_DIR="dist/logs"
BUILD_LOG="$LOG_DIR/build_log.md"
ERROR_LOG="$LOG_DIR/error_log.txt"

# Create log directory
mkdir -p "$LOG_DIR"

log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "$timestamp [$level] $message" >> "../$BUILD_LOG"
}

log_error() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "$timestamp [ERROR] $message" >> "../$ERROR_LOG"
    echo -e "$timestamp [ERROR] $message" >> "../$BUILD_LOG"
}

echo "üöÄ Enhanced WubForge Build & Distribution Test"
echo "Logging to: $BUILD_LOG"

log_message "INFO" "Starting WubForge build process"
log_message "INFO" "Platform: $(uname -s) $(uname -m)"
log_message "INFO" "Date: $(date)"

# Clean and build
log_message "INFO" "Cleaning previous builds..."
echo "Cleaning previous builds..."
rm -rf build/
rm -rf dist/

log_message "INFO" "Configuring build..."
echo "Configuring build..."
mkdir -p build && cd build
if ! cmake .. -DCMAKE_BUILD_TYPE=Release 2>&1; then
    log_error "CMake configuration failed"
    exit 1
fi

log_message "INFO" "Building project..."
echo "Building project..."
if ! make -j4 2>&1; then
    log_error "Build failed - check $BUILD_LOG for details"
    exit 1
fi

log_message "INFO" "Build completed successfully!"
echo "Build completed successfully!"

# Create basic distribution structure
log_message "INFO" "Creating distribution structure..."
echo "Creating distribution..."
mkdir -p "../dist/1.0.0/macos-wip"

if cp -r WubForge_artefacts/Release/* "../dist/1.0.0/macos-wip/" 2>/dev/null; then
    log_message "INFO" "Artifacts copied successfully"
else
    log_error "Failed to copy build artifacts"
    log_message "WARN" "Proceeding with partial distribution"
fi

# Generate build summary
cat > "../dist/1.0.0/build_summary.md" << EOF
# WubForge Build Summary

**Build Date:** $(date)
**Platform:** $(uname -s) $(uname -m)
**Version:** 1.0.0

## Build Status
‚úÖ CMake configuration: PASSED
‚úÖ Compilation: PASSED
‚úÖ Distribution packaging: COMPLETED

## Integrated Libraries
- JUCE $(grep -o "set(JUCE_MODULES" ../CMakeLists.txt | head -1 || echo "6.x+")
- chowdsp_utils: Professional DSP algorithms
- foleys_gui_magic: WYSIWYG editor (temporarily disabled)
- mda-plugins-juce: Classic MDA algorithms

## Known Issues
- GUI integration temporarily simplified for build
- Some DSP modules need parameter mapping

## Distribution Contents
- VST3 Plugin: $(ls -la "../dist/1.0.0/macos-wip/VST3/" 2>/dev/null | wc -l || echo "Missing") files
- AU Plugin: $(ls -la "../dist/1.0.0/macos-wip/AU/" 2>/dev/null | wc -l || echo "Missing") files
- Standalone: $(ls -la "../dist/1.0.0/macos-wip/Standalone/" 2>/dev/null | wc -l || echo "Missing") files

---
*Auto-generated by build script*
EOF

log_message "INFO" "Distribution ready: ../dist/1.0.0/macos-wip"
echo "Distribution ready: ../dist/1.0.0/macos-wip"

if [[ -f "$ERROR_LOG" ]] && [[ -s "$ERROR_LOG" ]]; then
    echo "‚ö†Ô∏è  Warning: Some issues encountered - check $ERROR_LOG"
    log_message "WARN" "Build completed with warnings - check error log"
else
    echo "‚úÖ Build and distribution completed successfully!"
    log_message "INFO" "Build completed without errors"
fi
